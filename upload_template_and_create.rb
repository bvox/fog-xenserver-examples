require 'fog'                                                               
require 'net/scp'
require 'pp'
require 'uuidtools'

xenserver = Fog::Compute.new({
  :provider => 'XenServer',
  :xenserver_url => 'xenserver-test',
  :xenserver_username => 'root',
  :xenserver_password => 'secret',
})

sr = xenserver.storage_repositories.find { |sr| sr.name ==  "Local File SR" }

image_uuid = UUIDTools::UUID.random_create.to_s
sr_mount_point = "/var/run/sr-mount/#{sr.uuid}"
destination = File.join(sr_mount_point, "#{image_uuid}.vhd")
source = 'ubuntu.vhd'

# Use the XenServer host credentials
Net::SSH.start('xenserver-test', 'root', :password => 'secret') do |ssh|              
  ssh.scp.upload!(source, destination) do |ch, name, sent, total|              
    # print progress
    p = (sent.to_f * 100 / total.to_f).to_i.to_s                        
    print "\rProgress: #{p}% completed"                     
  end                                                                   
end 

sr.scan

ubuntu_vdi = xenserver.vdis.find { |vdi| vdi.uuid == image_uuid }
ubuntu_vdi.set_attribute 'name_label', 'ubuntu-template'

mem = server_mem = (512 * 1024 * 1024).to_s
server = xenserver.servers.new :name               => "ubuntu-template",
                               # Required when using Server.new
                               :affinity           => xenserver.hosts.first,
                               :other_config       => {},
                               :pv_bootloader      => 'pygrub',          # PV related
                               :hvm_boot_policy    => '',                # PV related
                               :pv_args            => '-- console=hvc0', # PV related
                               :memory_static_max  => mem,
                               :memory_static_min  => mem,
                               :memory_dynamic_max => mem,                       
                               :memory_dynamic_min => mem 
server.save

xenserver.vbds.create :server => server, :vdi => ubuntu_vdi

net = xenserver.networks.find { |n| n.name == 'Pool-wide network associated with eth0' }
vif_attr = {
  'MAC_autogenerated' => 'True',
  'VM'                => server.reference, # we need the VM reference here
  'network'           => net.reference, # we need the Network reference here
  'MAC'               => '', # ignored, since we use autogeneration
  'device'            => '0',
  'MTU'               => '0',
  'other_config'      => {},
  'qos_algorithm_type' => 'ratelimit',                                 
  'qos_algorithm_params' => {}
}
xenserver.create_vif_custom vif_attr

xenserver.servers.custom_templates.find { |t| puts t.name }

xenserver.servers.create :name => 'my-brand-new-server',
                         :template_name => 'ubuntu-template'

